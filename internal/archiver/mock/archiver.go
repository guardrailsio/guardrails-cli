// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/guardrailsio/guardrails-cli/internal/archiver (interfaces: Archiver)

// Package mockarchiver is a generated GoMock package.
package mockarchiver

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArchiver is a mock of Archiver interface.
type MockArchiver struct {
	ctrl     *gomock.Controller
	recorder *MockArchiverMockRecorder
}

// MockArchiverMockRecorder is the mock recorder for MockArchiver.
type MockArchiverMockRecorder struct {
	mock *MockArchiver
}

// NewMockArchiver creates a new mock instance.
func NewMockArchiver(ctrl *gomock.Controller) *MockArchiver {
	mock := &MockArchiver{ctrl: ctrl}
	mock.recorder = &MockArchiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiver) EXPECT() *MockArchiverMockRecorder {
	return m.recorder
}

// OutputZipToFile mocks base method.
func (m *MockArchiver) OutputZipToFile(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputZipToFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutputZipToFile indicates an expected call of OutputZipToFile.
func (mr *MockArchiverMockRecorder) OutputZipToFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputZipToFile", reflect.TypeOf((*MockArchiver)(nil).OutputZipToFile), arg0, arg1, arg2)
}

// OutputZipToIOReader mocks base method.
func (m *MockArchiver) OutputZipToIOReader(arg0 string, arg1 []string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputZipToIOReader", arg0, arg1)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutputZipToIOReader indicates an expected call of OutputZipToIOReader.
func (mr *MockArchiverMockRecorder) OutputZipToIOReader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputZipToIOReader", reflect.TypeOf((*MockArchiver)(nil).OutputZipToIOReader), arg0, arg1)
}
